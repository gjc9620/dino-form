import _Object$assign from "@babel/runtime-corejs2/core-js/object/assign";
import _Object$entries from "@babel/runtime-corejs2/core-js/object/entries";
import _slicedToArray from "@babel/runtime-corejs2/helpers/esm/slicedToArray";
import _Number$isNaN from "@babel/runtime-corejs2/core-js/number/is-nan";
import _Promise from "@babel/runtime-corejs2/core-js/promise";
export function sleep(time) {
  return new _Promise(r => {
    setTimeout(r, time);
  });
}
export function isExist(value) {
  return value !== undefined && value !== null && !_Number$isNaN(value);
}
export function mapObject(obj, callback) {
  const mapedObj = {};

  for (const _ref of _Object$entries(obj)) {
    var _ref2 = _slicedToArray(_ref, 2);

    const key = _ref2[0];
    const value = _ref2[1];

    _Object$assign(mapedObj, callback(key, value, obj));
  }

  return mapedObj;
}
export async function mapObjectAsync(obj, callback) {
  const mapedObj = {};

  for (const _ref3 of _Object$entries(obj)) {
    var _ref4 = _slicedToArray(_ref3, 2);

    const key = _ref4[0];
    const value = _ref4[1];

    _Object$assign(mapedObj, (await callback(key, value, obj)));
  }

  return mapedObj;
}
export function getValueFromEvent(e) {
  const target = e.target;
  return target.type === 'checkbox' ? target.checked : target.value;
}
export function isEventObj(obj) {
  if (obj === null || typeof obj !== 'object') {
    return false;
  }

  return obj.type !== undefined && obj.target !== undefined && typeof obj.preventDefault === 'function';
}
export const prefix = className => `dino-form-${className}`;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLmpzIl0sIm5hbWVzIjpbInNsZWVwIiwidGltZSIsInIiLCJzZXRUaW1lb3V0IiwiaXNFeGlzdCIsInZhbHVlIiwidW5kZWZpbmVkIiwibWFwT2JqZWN0Iiwib2JqIiwiY2FsbGJhY2siLCJtYXBlZE9iaiIsImtleSIsIm1hcE9iamVjdEFzeW5jIiwiZ2V0VmFsdWVGcm9tRXZlbnQiLCJlIiwidGFyZ2V0IiwidHlwZSIsImNoZWNrZWQiLCJpc0V2ZW50T2JqIiwicHJldmVudERlZmF1bHQiLCJwcmVmaXgiLCJjbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxTQUFTQSxLQUFULENBQWVDLElBQWYsRUFBcUI7QUFDMUIsU0FBTyxhQUFhQyxDQUFELElBQU87QUFDeEJDLElBQUFBLFVBQVUsQ0FBQ0QsQ0FBRCxFQUFJRCxJQUFKLENBQVY7QUFDRCxHQUZNLENBQVA7QUFHRDtBQUVELE9BQU8sU0FBU0csT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFDN0IsU0FDRUEsS0FBSyxLQUFLQyxTQUFWLElBQ0dELEtBQUssS0FBSyxJQURiLElBRUcsQ0FBQyxjQUFhQSxLQUFiLENBSE47QUFLRDtBQUVELE9BQU8sU0FBU0UsU0FBVCxDQUFtQkMsR0FBbkIsRUFBd0JDLFFBQXhCLEVBQWtDO0FBQ3ZDLFFBQU1DLFFBQVEsR0FBRyxFQUFqQjs7QUFDQSxxQkFBMkIsZ0JBQWVGLEdBQWYsQ0FBM0IsRUFBZ0Q7QUFBQTs7QUFBQSxVQUFwQ0csR0FBb0M7QUFBQSxVQUEvQk4sS0FBK0I7O0FBQzlDLG1CQUFjSyxRQUFkLEVBQXdCRCxRQUFRLENBQUNFLEdBQUQsRUFBTU4sS0FBTixFQUFhRyxHQUFiLENBQWhDO0FBQ0Q7O0FBQ0QsU0FBT0UsUUFBUDtBQUNEO0FBRUQsT0FBTyxlQUFlRSxjQUFmLENBQThCSixHQUE5QixFQUFtQ0MsUUFBbkMsRUFBNkM7QUFDbEQsUUFBTUMsUUFBUSxHQUFHLEVBQWpCOztBQUNBLHNCQUEyQixnQkFBZUYsR0FBZixDQUEzQixFQUFnRDtBQUFBOztBQUFBLFVBQXBDRyxHQUFvQztBQUFBLFVBQS9CTixLQUErQjs7QUFDOUMsbUJBQWNLLFFBQWQsR0FBd0IsTUFBTUQsUUFBUSxDQUFDRSxHQUFELEVBQU1OLEtBQU4sRUFBYUcsR0FBYixDQUF0QztBQUNEOztBQUNELFNBQU9FLFFBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0csaUJBQVQsQ0FBMkJDLENBQTNCLEVBQThCO0FBQUEsUUFDM0JDLE1BRDJCLEdBQ2hCRCxDQURnQixDQUMzQkMsTUFEMkI7QUFFbkMsU0FBT0EsTUFBTSxDQUFDQyxJQUFQLEtBQWdCLFVBQWhCLEdBQTZCRCxNQUFNLENBQUNFLE9BQXBDLEdBQThDRixNQUFNLENBQUNWLEtBQTVEO0FBQ0Q7QUFHRCxPQUFPLFNBQVNhLFVBQVQsQ0FBb0JWLEdBQXBCLEVBQXlCO0FBQzlCLE1BQUlBLEdBQUcsS0FBSyxJQUFSLElBQWdCLE9BQU9BLEdBQVAsS0FBZSxRQUFuQyxFQUE2QztBQUMzQyxXQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUNFQSxHQUFHLENBQUNRLElBQUosS0FBYVYsU0FBYixJQUNHRSxHQUFHLENBQUNPLE1BQUosS0FBZVQsU0FEbEIsSUFFRyxPQUFPRSxHQUFHLENBQUNXLGNBQVgsS0FBOEIsVUFIbkM7QUFLRDtBQUVELE9BQU8sTUFBTUMsTUFBTSxHQUFHQyxTQUFTLElBQUssYUFBWUEsU0FBVSxFQUFuRCIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyKSA9PiB7XG4gICAgc2V0VGltZW91dChyLCB0aW1lKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V4aXN0KHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICYmIHZhbHVlICE9PSBudWxsXG4gICAgJiYgIU51bWJlci5pc05hTih2YWx1ZSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9iamVjdChvYmosIGNhbGxiYWNrKSB7XG4gIGNvbnN0IG1hcGVkT2JqID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICBPYmplY3QuYXNzaWduKG1hcGVkT2JqLCBjYWxsYmFjayhrZXksIHZhbHVlLCBvYmopKTtcbiAgfVxuICByZXR1cm4gbWFwZWRPYmo7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXBPYmplY3RBc3luYyhvYmosIGNhbGxiYWNrKSB7XG4gIGNvbnN0IG1hcGVkT2JqID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICBPYmplY3QuYXNzaWduKG1hcGVkT2JqLCBhd2FpdCBjYWxsYmFjayhrZXksIHZhbHVlLCBvYmopKTtcbiAgfVxuICByZXR1cm4gbWFwZWRPYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZUZyb21FdmVudChlKSB7XG4gIGNvbnN0IHsgdGFyZ2V0IH0gPSBlO1xuICByZXR1cm4gdGFyZ2V0LnR5cGUgPT09ICdjaGVja2JveCcgPyB0YXJnZXQuY2hlY2tlZCA6IHRhcmdldC52YWx1ZTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudE9iaihvYmopIHtcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgb2JqLnR5cGUgIT09IHVuZGVmaW5lZFxuICAgICYmIG9iai50YXJnZXQgIT09IHVuZGVmaW5lZFxuICAgICYmIHR5cGVvZiBvYmoucHJldmVudERlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IHByZWZpeCA9IGNsYXNzTmFtZSA9PiBgZGluby1mb3JtLSR7Y2xhc3NOYW1lfWA7XG4iXX0=