import _objectSpread from "@babel/runtime-corejs2/helpers/esm/objectSpread";
import _defineProperty from "@babel/runtime-corejs2/helpers/esm/defineProperty";
import _extends from "@babel/runtime-corejs2/helpers/esm/extends";
import _Object$assign from "@babel/runtime-corejs2/core-js/object/assign";
import _objectWithoutProperties from "@babel/runtime-corejs2/helpers/esm/objectWithoutProperties";
import React, { Component } from 'react';
import { prefix, mapObject, sleep } from './util';
import DinoFormItem from './DinoFormItem';
import Drag from './Drag';
export async function getRef() {
  let getFun = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};
  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  let ref = getFun();
  const startTime = +new Date();

  while (1) {
    const now = +new Date();

    if (now - startTime > timeout) {
      console.warn('[dino-form] get ref timeout, maybe you not render it.');
      return undefined;
    }

    await sleep();
    ref = getFun();
    if (ref) break;
  }

  return ref;
}
export const createFragments = (_ref) => {
  let fragments = _ref.fragments,
      createDinoFormApi = _ref.createDinoFormApi;
  return mapObject(fragments, function (comName) {
    let _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        Com = _ref2.Com,
        props = _objectWithoutProperties(_ref2, ["Com"]);

    return {
      [comName]: _Object$assign(class Fragment extends Component {
        render() {
          return React.createElement(Com, _extends({
            dinoForm: createDinoFormApi()
          }, props, this.props || {}));
        }

      }, props)
    };
  });
};
export const createFromItem = (_ref3) => {
  let createDinoFormApi = _ref3.createDinoFormApi;
  return class DinoFormItemWrap extends Component {
    render() {
      return React.createElement(DinoFormItem, _extends({
        dinoForm: createDinoFormApi()
      }, this.props || {}));
    }

  };
};
export const createDinoFormGroupWrap = (_ref4) => {
  var _temp;

  let setIDRefMap = _ref4.setIDRefMap,
      Com = _ref4.Com,
      topFormRender = _ref4.topFormRender;
  return _temp = class DinoFormWrap extends Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "catchRef", ref => {
        const _this$props = this.props,
              ID = _this$props.ID,
              _this$props$catchRef = _this$props.catchRef,
              catchRef = _this$props$catchRef === void 0 ? () => {} : _this$props$catchRef;
        this.Com = ref;
        catchRef(ref);
      });

      this.Com = undefined;
    }

    componentDidMount() {
      const _this$props2 = this.props,
            ID = _this$props2.ID,
            index = _this$props2.index;
      setIDRefMap(ID, {
        ref: this.Com
      });
    }

    componentWillUnmount() {
      const _this$props3 = this.props,
            ID = _this$props3.ID,
            index = _this$props3.index;
      setIDRefMap(ID, {
        ref: undefined
      });
    }

    render() {
      const _this$props4 = this.props,
            ID = _this$props4.ID,
            index = _this$props4.index;
      return React.createElement(Com, {
        ID: ID,
        index: index,
        ref: this.catchRef,
        topFormRender: topFormRender,
        subGroupForm: true
      });
    }

  }, _temp;
};
export const createDinoFormSubForm = subForms => mapObject(subForms, (formName, form) => {
  const Form = form.Form,
        field = form.field,
        _form$formProps = form.formProps,
        formProps = _form$formProps === void 0 ? {} : _form$formProps;
  const subForm = {
    field,
    formProps,
    ref: undefined,
    Form: class DinoSubForm extends Component {
      render() {
        return React.createElement(Form, _extends({}, formProps, this.props, {
          ref: _ref5 => {
            subForm.ref = _ref5;
          }
        }));
      }

    }
  };
  return {
    [formName]: subForm
  };
});
export const dinoFormAddItem = (_ref6) => {
  let getGroup = _ref6.getGroup,
      setID = _ref6.setID,
      getID = _ref6.getID,
      render = _ref6.render;
  const ID = getID();
  getGroup().IDList.push(ID);
  setID(ID + 1);
  render();
  return ID;
};
export const dinoFormDeleteItem = (_ref7) => {
  let deleteID = _ref7.ID,
      getGroup = _ref7.getGroup,
      render = _ref7.render;
  const group = getGroup();
  group.IDList = group.IDList.filter(ID => ID !== deleteID);
  render();
};
export const dinoFormMoveItem = (_ref8) => {
  let ID = _ref8.ID,
      offset = _ref8.offset,
      getGroup = _ref8.getGroup,
      render = _ref8.render;
  const group = getGroup();
  const index = group.IDList.indexOf(ID);
  group.lastActionMoveID = ID;

  if (offset === -Infinity) {
    group.lastMoveID = group.IDList[0];
    group.IDList.splice(index, 1);
    group.IDList.splice(0, 0, ID);
  } else if (offset === Infinity) {
    group.lastMoveID = group.IDList[group.IDList.length - 1];
    group.IDList.splice(index, 1);
    group.IDList.splice(group.IDList.length, 0, ID);
  } else {
    group.lastMoveID = group.IDList[index + offset];
    group.IDList.splice(index, 1);
    group.IDList.splice(index + offset, 0, ID);
  }

  render();
};
export const dinoFormMapGroup = (_ref9) => {
  let _ref9$Form = _ref9.Form,
      FormCom = _ref9$Form.FormCom,
      formProps = _ref9$Form.formProps,
      ID = _ref9.ID,
      IDList = _ref9.IDList,
      index = _ref9.index,
      deleteIt = _ref9.deleteIt,
      moveIt = _ref9.moveIt;
  return [React.createElement(FormCom, _extends({}, formProps, {
    key: ID
  })), React.createElement("div", {
    className: prefix('group-actions'),
    key: "group-actions"
  }, React.createElement("div", {
    className: prefix('group-action-delete'),
    onClick: deleteIt
  }), index !== 0 && React.createElement("div", {
    className: prefix('group-action-move-up'),
    onClick: () => moveIt(-1)
  }), index !== IDList.length - 1 && React.createElement("div", {
    className: prefix('group-action-move-down'),
    onClick: () => moveIt(1)
  }), index !== 0 && React.createElement("div", {
    className: prefix('group-action-move-to-first'),
    onClick: () => moveIt(-Infinity)
  }), index !== IDList.length - 1 && React.createElement("div", {
    className: prefix('group-action-move-to-last'),
    onClick: () => moveIt(Infinity)
  }))];
};
export const groupsAPI = (_ref10) => {
  let groups = _ref10.groups,
      render = _ref10.render,
      setID = _ref10.setID,
      getID = _ref10.getID;
  return mapObject(groups, (formName, groupValue) => {
    const Com = groupValue.Com,
          field = groupValue.field,
          needDrag = groupValue.needDrag,
          IDRefMap = groupValue.IDRefMap,
          IDList = groupValue.IDList,
          Form = groupValue.Form,
          _groupValue$formProps = groupValue.formProps,
          formProps = _groupValue$formProps === void 0 ? {} : _groupValue$formProps;

    const addItem = function addItem() {
      let add = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dinoFormAddItem;
      return add({
        getGroup: () => groupValue,
        setID,
        getID,
        render
      });
    };

    const deleteItem = function deleteItem(ID) {
      let deleteItemFun = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : dinoFormDeleteItem;
      return deleteItemFun({
        ID,
        getGroup: () => groupValue,
        setID,
        getID,
        render
      });
    };

    const moveItem = function moveItem(ID, offset) {
      let move = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : dinoFormMoveItem;
      return move({
        ID,
        offset,
        getGroup: () => groupValue,
        setID,
        getID,
        render
      });
    };

    const doAction = fun => fun({
      getGroup: () => groupValue,
      setID,
      getID,
      render
    });

    const mapFun = (mapGroup, ID, index) => mapGroup({
      ID,
      index: +index,
      Com,
      field,
      IDRefMap,
      IDList,
      Form: {
        FormCom: Form,
        formProps: _objectSpread({}, formProps, (groups[formName].IDRefMap[ID] || {}).props || {}, {
          ID
        })
      },
      deleteIt: () => deleteItem(ID),
      moveIt: offset => moveItem(ID, offset),
      formProps
    });

    const group = {
      IDList,
      dragMap: function dragMap() {
        let mapGroup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dinoFormMapGroup;
        return IDList.length > 0 ? React.createElement(Drag, {
          order: [...IDList],
          lastActionMoveID: groupValue.lastActionMoveID,
          lastMoveID: groupValue.lastMoveID,
          changeDone: newIDList => {
            groupValue.IDList = [...newIDList];
            render();
          }
        }, mapObject(IDList, (index, ID) => ({
          [ID]: mapFun(mapGroup, ID, index)
        }))) : null;
      },
      map: function map() {
        let mapGroup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dinoFormMapGroup;
        return IDList.length > 0 ? React.createElement("div", {
          className: `${prefix('map-container')}`
        }, IDList.map((ID, index) => React.createElement("div", {
          className: `${prefix('group-item-wrap')}`,
          key: ID
        }, mapFun(mapGroup, ID, index)))) : null;
      },
      render: function render() {
        let renderGroup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ele => React.createElement("div", {
          className: `${prefix('group')}`
        }, React.createElement("div", {
          className: `${prefix('group-ele')}`
        }, ele), React.createElement("div", {
          className: prefix('group-action-add'),
          onClick: () => addItem()
        }));
        let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : needDrag ? group.dragMap() : group.map();
        return React.createElement("div", {
          className: `${prefix('group-wrap')}`
        }, renderGroup(children));
      },
      addItem,
      deleteItem,
      moveItem,
      doAction
    };
    return {
      [formName]: group
    };
  });
};
export const subFormsAPI = function subFormsAPI() {
  let _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      subForms = _ref11.subForms;

  return mapObject(subForms, (formName, _ref12) => {
    let Form = _ref12.Form;
    return {
      [formName]: Form
    };
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,