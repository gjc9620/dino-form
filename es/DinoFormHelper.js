import _objectSpread from "@babel/runtime-corejs2/helpers/esm/objectSpread";
import _defineProperty from "@babel/runtime-corejs2/helpers/esm/defineProperty";
import _extends from "@babel/runtime-corejs2/helpers/esm/extends";
import _Object$assign from "@babel/runtime-corejs2/core-js/object/assign";
import _objectWithoutProperties from "@babel/runtime-corejs2/helpers/esm/objectWithoutProperties";
import React, { Component } from 'react';
import { prefix, mapObject, sleep, isExist, isNotExist } from './util';
import DinoFormItem from './DinoFormItem';
import Drag from './Drag';
export async function getRef() {
  let getFun = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};
  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  let ref = getFun();
  const startTime = +new Date();

  while (1) {
    const now = +new Date();

    if (now - startTime > timeout) {
      console.warn('[dino-form] get ref timeout, maybe you not render it.');
      return undefined;
    }

    await sleep();
    ref = getFun();
    if (ref) break;
  }

  return ref;
}
export const createFragments = (_ref) => {
  let fragments = _ref.fragments,
      createDinoFormApi = _ref.createDinoFormApi;
  return mapObject(fragments, function (comName) {
    let _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        Com = _ref2.Com,
        props = _objectWithoutProperties(_ref2, ["Com"]);

    return {
      [comName]: _Object$assign(class Fragment extends Component {
        render() {
          return React.createElement(Com, _extends({
            dinoForm: createDinoFormApi()
          }, props, this.props || {}));
        }

      }, props)
    };
  });
};
export const createFromItem = (_ref3) => {
  let createDinoFormApi = _ref3.createDinoFormApi;
  return class DinoFormItemWrap extends Component {
    render() {
      return React.createElement(DinoFormItem, _extends({
        dinoForm: createDinoFormApi()
      }, this.props || {}));
    }

  };
};
export const createDinoFormGroupWrap = (_ref4) => {
  var _temp;

  let setIDRefMap = _ref4.setIDRefMap,
      Com = _ref4.Com,
      topFormRender = _ref4.topFormRender;
  return _temp = class DinoFormWrap extends Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "checkID", () => {
        const _this$props = this.props,
              ID = _this$props.ID,
              index = _this$props.index;

        if (isNotExist(ID)) {
          console.error('[dino-form] props ID not found, look like you forget give a ID in map function.');
        }
      });

      _defineProperty(this, "catchRef", ref => {
        const _this$props2 = this.props,
              ID = _this$props2.ID,
              _this$props2$catchRef = _this$props2.catchRef,
              catchRef = _this$props2$catchRef === void 0 ? () => {} : _this$props2$catchRef;
        this.Com = ref;
        catchRef(ref);
      });

      this.Com = undefined;
    }

    componentDidMount() {
      const _this$props3 = this.props,
            ID = _this$props3.ID,
            index = _this$props3.index;
      this.checkID();
      setIDRefMap(ID, {
        ref: this.Com
      });
    }

    componentWillUnmount() {
      const _this$props4 = this.props,
            ID = _this$props4.ID,
            index = _this$props4.index;
      this.checkID();
      setIDRefMap(ID, {
        ref: undefined
      });
    }

    render() {
      const _this$props5 = this.props,
            ID = _this$props5.ID,
            index = _this$props5.index;
      return React.createElement(Com, {
        ID: ID,
        index: index,
        ref: this.catchRef,
        topFormRender: topFormRender,
        subGroupForm: true
      });
    }

  }, _temp;
};
export const createDinoFormSubForm = function createDinoFormSubForm() {
  let _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      subForms = _ref5.subForms,
      topFormRender = _ref5.topFormRender;

  return mapObject(subForms, (formName, form) => {
    const Form = form.Form,
          field = form.field,
          _form$formProps = form.formProps,
          formProps = _form$formProps === void 0 ? {} : _form$formProps;
    const subForm = {
      field,
      formProps,
      ref: undefined,
      Form: class DinoSubForm extends Component {
        render() {
          return React.createElement(Form, _extends({}, formProps, this.props, {
            topFormRender: topFormRender,
            ref: _ref6 => {
              subForm.ref = _ref6;
            }
          }));
        }

      }
    };
    return {
      [formName]: subForm
    };
  });
};
export const dinoFormAddItem = (_ref7) => {
  let getGroup = _ref7.getGroup,
      setID = _ref7.setID,
      getID = _ref7.getID,
      render = _ref7.render;
  const ID = getID();
  getGroup().IDList.push(ID);
  setID(ID + 1);
  render();
  return ID;
};
export const dinoFormDeleteItem = (_ref8) => {
  let deleteID = _ref8.ID,
      getGroup = _ref8.getGroup,
      render = _ref8.render;
  const group = getGroup();
  group.IDList = group.IDList.filter(ID => ID !== deleteID);
  render();
};
export const dinoFormMoveItem = (_ref9) => {
  let ID = _ref9.ID,
      offset = _ref9.offset,
      getGroup = _ref9.getGroup,
      render = _ref9.render;
  const group = getGroup();
  const index = group.IDList.indexOf(ID);
  group.lastActionMoveID = ID;

  if (offset === -Infinity) {
    group.lastMoveID = group.IDList[0];
    group.IDList.splice(index, 1);
    group.IDList.splice(0, 0, ID);
  } else if (offset === Infinity) {
    group.lastMoveID = group.IDList[group.IDList.length - 1];
    group.IDList.splice(index, 1);
    group.IDList.splice(group.IDList.length, 0, ID);
  } else {
    group.lastMoveID = group.IDList[index + offset];
    group.IDList.splice(index, 1);
    group.IDList.splice(index + offset, 0, ID);
  }

  render();
};
export const dinoFormMapGroup = (_ref10) => {
  let _ref10$Form = _ref10.Form,
      FormCom = _ref10$Form.FormCom,
      formProps = _ref10$Form.formProps,
      ID = _ref10.ID,
      IDList = _ref10.IDList,
      index = _ref10.index,
      deleteIt = _ref10.deleteIt,
      moveIt = _ref10.moveIt;
  return [React.createElement(FormCom, _extends({}, formProps, {
    key: ID
  })), React.createElement("div", {
    className: prefix('group-actions'),
    key: "group-actions"
  }, React.createElement("div", {
    className: prefix('group-action-delete'),
    onClick: deleteIt
  }), index !== 0 && React.createElement("div", {
    className: prefix('group-action-move-up'),
    onClick: () => moveIt(-1)
  }), index !== IDList.length - 1 && React.createElement("div", {
    className: prefix('group-action-move-down'),
    onClick: () => moveIt(1)
  }), index !== 0 && React.createElement("div", {
    className: prefix('group-action-move-to-first'),
    onClick: () => moveIt(-Infinity)
  }), index !== IDList.length - 1 && React.createElement("div", {
    className: prefix('group-action-move-to-last'),
    onClick: () => moveIt(Infinity)
  }))];
};
export const groupsAPI = (_ref11) => {
  let groups = _ref11.groups,
      render = _ref11.render,
      setID = _ref11.setID,
      getID = _ref11.getID;
  return mapObject(groups, (formName, groupValue) => {
    const Com = groupValue.Com,
          field = groupValue.field,
          needDrag = groupValue.needDrag,
          clearMotions = groupValue.clearMotions,
          pressedMotions = groupValue.pressedMotions,
          notPressedMotions = groupValue.notPressedMotions,
          createStyle = groupValue.createStyle,
          IDRefMap = groupValue.IDRefMap,
          IDList = groupValue.IDList,
          Form = groupValue.Form,
          _groupValue$formProps = groupValue.formProps,
          formProps = _groupValue$formProps === void 0 ? {} : _groupValue$formProps;

    const addItem = function addItem() {
      let add = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dinoFormAddItem;
      return add({
        getGroup: () => groupValue,
        setID,
        getID,
        render
      });
    };

    const deleteItem = function deleteItem(ID) {
      let deleteItemFun = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : dinoFormDeleteItem;
      return deleteItemFun({
        ID,
        getGroup: () => groupValue,
        setID,
        getID,
        render
      });
    };

    const moveItem = function moveItem(ID, offset) {
      let move = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : dinoFormMoveItem;
      return move({
        ID,
        offset,
        getGroup: () => groupValue,
        setID,
        getID,
        render
      });
    };

    const doAction = fun => fun({
      getGroup: () => groupValue,
      setID,
      getID,
      render
    });

    const mapFun = (mapGroup, ID, index) => mapGroup({
      ID,
      index: +index,
      Com,
      field,
      IDRefMap,
      IDList,
      Form: {
        FormCom: Form,
        formProps: _objectSpread({}, formProps, (groups[formName].IDRefMap[ID] || {}).props || {}, {
          ID
        })
      },
      deleteIt: () => deleteItem(ID),
      moveIt: offset => moveItem(ID, offset),
      formProps
    });

    const group = {
      IDList,
      dragMap: function dragMap() {
        let mapGroup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dinoFormMapGroup;
        return IDList.length > 0 // todo style config
        ? React.createElement(Drag, {
          order: [...IDList],
          lastActionMoveID: groupValue.lastActionMoveID,
          lastMoveID: groupValue.lastMoveID,
          clearMotions: clearMotions,
          pressedMotions: pressedMotions,
          notPressedMotions: notPressedMotions,
          createStyle: createStyle,
          changeDone: newIDList => {
            groupValue.IDList = [...newIDList];
            render();
          }
        }, mapObject(IDList, (index, ID) => ({
          [ID]: mapFun(mapGroup, ID, index)
        }))) : null;
      },
      map: function map() {
        let mapGroup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dinoFormMapGroup;
        return IDList.length > 0 ? React.createElement("div", {
          className: `${prefix('map-container')}`
        }, IDList.map((ID, index) => React.createElement("div", {
          className: `${prefix('group-item-wrap')}`,
          key: ID
        }, mapFun(mapGroup, ID, index)))) : null;
      },
      render: function render() {
        let renderGroup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ele => React.createElement("div", {
          className: `${prefix('group')}`
        }, React.createElement("div", {
          className: `${prefix('group-ele')}`
        }, ele), React.createElement("div", {
          className: prefix('group-action-add'),
          onClick: () => addItem()
        }));
        let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : needDrag ? group.dragMap() : group.map();
        return React.createElement("div", {
          className: `${prefix('group-wrap')}`
        }, renderGroup(children));
      },
      addItem,
      deleteItem,
      moveItem,
      doAction
    };
    return {
      [formName]: group
    };
  });
};
export const subFormsAPI = function subFormsAPI() {
  let _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      subForms = _ref12.subForms;

  return mapObject(subForms, (formName, _ref13) => {
    let Form = _ref13.Form;
    return {
      [formName]: Form
    };
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,